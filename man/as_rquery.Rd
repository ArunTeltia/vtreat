% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rquery_treatment.R
\name{as_rquery}
\alias{as_rquery}
\title{Convert a vtreat tstep into an rquery operation tree.}
\usage{
as_rquery(tstep, ...)
}
\arguments{
\item{tstep}{vtreat treatment plan.}

\item{...}{not used, force any later arguments to bind to names.}
}
\value{
list(optree_generator (ordered list of functions), temp_tables (named list of tables))
}
\description{
Convert a vtreat tstep into an rquery operation tree.
}
\examples{

if(requireNamespace("rquery", quietly = TRUE)) {
   dTrainC <- data.frame(x= c('a', 'a', 'a', 'b' ,NA , 'b'),
                         z= c(1, 2, NA, 4, 5, 6),
                         y= c(FALSE, FALSE, TRUE, FALSE, TRUE, TRUE),
                         stringsAsFactors = FALSE)
   dTrainC$id <- seq_len(nrow(dTrainC))
   treatmentsC <- designTreatmentsC(dTrainC, c("x", "z"), 'y', TRUE)
   rqplan <- as_rquery(treatmentsC)
   ops <- flatten_fn_list(rquery::local_td(dTrainC), rqplan$optree_generators)
   cat(format(ops))
   if(requireNamespace("rqdatatable", quietly = TRUE)) {
      treated <- rqdatatable::ex_data_table(ops, tables = rqplan$tables)
      print(treated[])
   }
   if(requireNamespace("DBI", quietly = TRUE) &&
      requireNamespace("DBI", quietly = TRUE)) {
      db <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
      source_data <- rquery::rq_copy_to(db, "dTrainC", dTrainC,
                               overwrite = TRUE, temporary = TRUE)

      rest <- materialize_treated(db, rqplan, source_data, "dTreatedC", 
                                  extracols = "id",
                                  print_sql = FALSE)
      resd <- DBI::dbReadTable(db, rest$table_name)
      print(resd)

      rquery::rq_remove_table(db, source_data$table_name)
      rquery::rq_remove_table(db, rest$table_name)
      DBI::dbDisconnect(db)
   }
}

}
