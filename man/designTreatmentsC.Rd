% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/vtreat.R
\name{designTreatmentsC}
\alias{designTreatmentsC}
\title{designTreatmentsC}
\usage{
designTreatmentsC(dframe, varlist, outcomename, outcometarget, weights = c(),
  minFraction = 0.02, smFactor = 0, maxMissing = 0.04, collarProb = 0,
  scoreVars = TRUE, maxScoreSize = 1000000L, verbose = TRUE,
  forceCatNum = FALSE, parallelCluster = NULL)
}
\arguments{
\item{dframe}{Data frame to learn treatments from (training data).}

\item{varlist}{Names of columns to treat (effective variables).}

\item{outcomename}{Name of column holding outcome variable.}

\item{outcometarget}{Value/level of outcome to be considered "success"}

\item{weights}{optional training weights for each row}

\item{minFraction}{optional minimum frequency a categorical level must have to be converted to an indicator column.}

\item{smFactor}{optional smoothing factor for impact coding models.}

\item{maxMissing}{optional maximum fraction (by data weight) of a categorical variable that are allowed before switching from indicators to impact coding.}

\item{collarProb}{what fraction of the data (pseudo-probability) to collar data at (<0.5).}

\item{scoreVars}{optional if TRUE attempt to estimate individual variable utility.}

\item{maxScoreSize}{optional maximum size for treated variable scoring frame}

\item{verbose}{if TRUE print progress.}

\item{forceCatNum}{set to true to also get _catN style impact variables (not needed, for backward compatability)}

\item{parallelCluster}{(optional) a cluster object created by package parallel or package snow}
}
\value{
treatment plan (for use with prepare)
}
\description{
Function to design variable treatments for binary prediction of a
categorical outcome.  Data frame is assumed to have only atomic columns
except for dates (which are converted to numeric).
}
\examples{
dTrainC <- data.frame(x=c('a','a','a','b','b','b'),
   z=c(1,2,3,4,5,6),
   y=c(FALSE,FALSE,TRUE,FALSE,TRUE,TRUE))
dTestC <- data.frame(x=c('a','b','c',NA),
   z=c(10,20,30,NA))
treatmentsC <- designTreatmentsC(dTrainC,colnames(dTrainC),'y',TRUE)
dTrainCTreated <- prepare(treatmentsC,dTrainC)
dTestCTreated <- prepare(treatmentsC,dTestC)
}
\seealso{
\code{\link{prepare}} \code{\link{designTreatmentsN}} \code{\link{getNewVarNames}}
}

